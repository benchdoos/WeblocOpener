package com.github.benchdoos.weblocopener.gui.panels;

import com.github.benchdoos.weblocopener.domain.ExtendedModificationInfo;
import com.github.benchdoos.weblocopenercore.gui.Translatable;
import com.github.benchdoos.weblocopenercore.service.settings.impl.LocaleSettings;
import com.github.benchdoos.weblocopenercore.service.translation.Translation;
import org.apache.commons.lang3.StringUtils;

import javax.swing.*;
import java.awt.*;
import java.util.Locale;
import java.util.Map;

public class UpdateInfoRecord extends JPanel implements Translatable {
    private JLabel typeLabel;
    private JTextArea descriptionLabel;
    private JPanel contentPane;
    private final ExtendedModificationInfo value;

    public UpdateInfoRecord(ExtendedModificationInfo value) {
        this.value = value;
        $$$setupUI$$$();
        initGui();
    }

    private void initGui() {
        setLayout(new GridLayout());
        add(contentPane);

        translate();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        descriptionLabel = new JTextArea();
        descriptionLabel.setLineWrap(true);
        descriptionLabel.setText("description");
        descriptionLabel.setWrapStyleWord(true);
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.NORTH;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPane.add(descriptionLabel, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setMinimumSize(new Dimension(120, 20));
        panel1.setPreferredSize(new Dimension(120, 20));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(panel1, gbc);
        typeLabel = new JLabel();
        typeLabel.setOpaque(true);
        typeLabel.setText("status");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(typeLabel, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        contentPane.add(spacer1, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    @Override
    public void translate() {
        String type;
        switch (value.type()) {
            case IMPROVEMENT -> {
                type = "improvementType";
                typeLabel.setBackground(Color.blue);
            }
            case BUGFIX -> {
                type = "fixType";
                typeLabel.setBackground(Color.red);
            }
            default -> {
                type = "featureType";
                typeLabel.setBackground(Color.green);
            }
        }
        final String typeValue = Translation.get("UpdateDialog", type);
        typeLabel.setText(typeValue);

        final Locale locale = (new LocaleSettings()).getValue();
        final Map<String, String> description = value.modification().description();
        final String message = description.get(locale.getLanguage().toLowerCase());
        if (StringUtils.isNotBlank(message)) {
            descriptionLabel.setText(message);
        } else {
            descriptionLabel.setText(description.get(LocaleSettings.getDefaultLocale().getLanguage().toLowerCase()));
        }
    }

}
