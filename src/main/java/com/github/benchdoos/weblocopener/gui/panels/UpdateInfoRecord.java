package com.github.benchdoos.weblocopener.gui.panels;

import com.github.benchdoos.weblocopener.domain.ExtendedModificationInfo;
import com.github.benchdoos.weblocopenercore.gui.Translatable;
import com.github.benchdoos.weblocopenercore.service.settings.impl.DarkModeActiveSettings;
import com.github.benchdoos.weblocopenercore.service.settings.impl.LocaleSettings;
import com.github.benchdoos.weblocopenercore.service.translation.Translation;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.apache.commons.lang3.StringUtils;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;
import java.util.Map;

public class UpdateInfoRecord extends JPanel implements Translatable {
    private JLabel typeLabel;
    private JTextArea descriptionLabel;
    private JPanel contentPane;
    private JPanel typePanel;
    private final ExtendedModificationInfo value;

    public UpdateInfoRecord(ExtendedModificationInfo value) {
        this.value = value;
        $$$setupUI$$$();
        initGui();
    }

    private void initGui() {
        setLayout(new GridLayout());
        add(contentPane);

        translate();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.setMaximumSize(new Dimension(-1, 100));
        contentPane.setPreferredSize(new Dimension(-1, 100));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1,
            new GridConstraints(0, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0,
                true));
        descriptionLabel = new JTextArea();
        descriptionLabel.setEditable(false);
        descriptionLabel.setFocusable(false);
        descriptionLabel.setLineWrap(true);
        descriptionLabel.setWrapStyleWord(true);
        panel1.add(descriptionLabel,
            new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null,
                new Dimension(-1, 100),
                new Dimension(-1, 100), 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1,
            new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPane.add(spacer2,
            new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        contentPane.add(spacer3,
            new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setOpaque(true);
        contentPane.add(panel2,
            new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0,
                false));
        final Spacer spacer4 = new Spacer();
        panel2.add(spacer4,
            new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        typePanel = new JPanel();
        typePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        typePanel.setOpaque(true);
        panel2.add(typePanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(140, -1),
            new Dimension(140, -1), new Dimension(140, -1), 0, false));
        typeLabel = new JLabel();
        Font typeLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, typeLabel.getFont());
        if (typeLabelFont != null) {
            typeLabel.setFont(typeLabelFont);
        }
        typeLabel.setOpaque(true);
        typeLabel.setText("Label");
        typePanel.add(typeLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) {
            return null;
        }
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font =
            new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) :
            new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    @Override
    public void translate() {
        String type;
        final Color color;
        switch (value.type()) {
            case IMPROVEMENT -> {
                type = "improvementType";
                if (Boolean.TRUE.equals(new DarkModeActiveSettings().getValue())) {
                    color = Color.decode("#4f73a5");
                } else {
                    color = Color.decode("#6492ce");
                }
                typePanel.setBackground(color);
                typeLabel.setBackground(color);
            }
            case BUGFIX -> {
                type = "fixType";
                if (Boolean.TRUE.equals(new DarkModeActiveSettings().getValue())) {
                    color = Color.decode("#d36767");
                } else {
                    color = Color.decode("#db6b6b");
                }
                typePanel.setBackground(color);
                typeLabel.setBackground(color);
            }
            default -> {
                type = "featureType";
                if (Boolean.TRUE.equals(new DarkModeActiveSettings().getValue())) {
                    color = Color.decode("#439443");
                } else {
                    color = Color.decode("#5cbe5c");
                }
                typePanel.setBackground(color);
                typeLabel.setBackground(color);
            }
        }
        final String typeValue = Translation.get("UpdateDialog", type);
        typeLabel.setText(typeValue);

        final Locale locale = Translation.getSelectedLocale();
        final Map<String, String> description = value.modification().description();
        final String message = description.get(locale.getLanguage().toLowerCase());
        if (StringUtils.isNotBlank(message)) {
            descriptionLabel.setText(message);
        } else {
            descriptionLabel.setText(description.get(LocaleSettings.getDefaultLocale().getLanguage().toLowerCase()));
        }
    }

}
