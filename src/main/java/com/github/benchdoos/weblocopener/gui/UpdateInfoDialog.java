/*
 * (C) Copyright 2019.  Eugene Zrazhevsky and others.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * Contributors:
 * Eugene Zrazhevsky <eugene.zrazhevsky@gmail.com>
 */

package com.github.benchdoos.weblocopener.gui;

import com.github.benchdoos.weblocopener.service.HtmlService;
import com.github.benchdoos.weblocopener.service.impl.DefaultHtmlService;
import com.github.benchdoos.weblocopener.utils.FrameUtils;
import com.github.benchdoos.weblocopenercore.domain.version.AppVersion;
import com.github.benchdoos.weblocopenercore.domain.version.UpdateInfo;
import com.github.benchdoos.weblocopenercore.service.UrlsProceed;
import com.github.benchdoos.weblocopenercore.service.settings.impl.DarkModeActiveSettings;
import com.github.benchdoos.weblocopenercore.service.translation.Translation;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import j2html.tags.specialized.HtmlTag;
import lombok.extern.log4j.Log4j2;

import javax.swing.*;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkEvent.EventType;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.lang.reflect.Method;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ResourceBundle;

@Log4j2
class UpdateInfoDialog extends JDialog {

  private final AppVersion applicationVersion;
  private final UpdateInfo updateInfo;
  private JPanel contentPane;
  private JButton buttonOK;
  private JTextPane textPane;
  @Deprecated(since = "2.1.0", forRemoval = true)
  private JPanel legacyPanel;
  private JPanel updateInfoPanel;
  private JEditorPane updateInfoEditorPane;
  private final HtmlService htmlService;

  UpdateInfoDialog(AppVersion applicationVersion, UpdateInfo updateInfo) {
    this.applicationVersion = applicationVersion;
    this.updateInfo = updateInfo;
    htmlService = new DefaultHtmlService();

    createGUI();
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    contentPane = new JPanel();
    contentPane.setLayout(new GridLayoutManager(3, 2, new Insets(10, 10, 10, 10), -1, -1));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
    contentPane.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
    final Spacer spacer1 = new Spacer();
    panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    buttonOK = new JButton();
    this.$$$loadButtonText$$$(buttonOK, this.$$$getMessageFromBundle$$$("spelling", "buttonOk"));
    panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    legacyPanel = new JPanel();
    legacyPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    contentPane.add(legacyPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    final JScrollPane scrollPane1 = new JScrollPane();
    legacyPanel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    textPane = new JTextPane();
    textPane.setContentType(this.$$$getMessageFromBundle$$$("spelling", "text.html"));
    textPane.setEditable(false);
    scrollPane1.setViewportView(textPane);
    updateInfoPanel = new JPanel();
    updateInfoPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    contentPane.add(updateInfoPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(600, -1), null, 0, false));
    final JScrollPane scrollPane2 = new JScrollPane();
    updateInfoPanel.add(scrollPane2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    updateInfoEditorPane = new JEditorPane();
    updateInfoEditorPane.setContentType("text/html");
    updateInfoEditorPane.setEditable(false);
    updateInfoEditorPane.setText("");
    scrollPane2.setViewportView(updateInfoEditorPane);
    final Spacer spacer2 = new Spacer();
    contentPane.add(spacer2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
  }

  private static Method $$$cachedGetBundleMethod$$$ = null;

  private String $$$getMessageFromBundle$$$(String path, String key) {
    ResourceBundle bundle;
    try {
      Class<?> thisClass = this.getClass();
      if ($$$cachedGetBundleMethod$$$ == null) {
        Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
        $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
      }
      bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
    } catch (Exception e) {
      bundle = ResourceBundle.getBundle(path);
    }
    return bundle.getString(key);
  }

  /**
   * @noinspection ALL
   */
  private void $$$loadButtonText$$$(AbstractButton component, String text) {
    StringBuffer result = new StringBuffer();
    boolean haveMnemonic = false;
    char mnemonic = '\0';
    int mnemonicIndex = -1;
    for (int i = 0; i < text.length(); i++) {
      if (text.charAt(i) == '&') {
        i++;
        if (i == text.length()) break;
        if (!haveMnemonic && text.charAt(i) != '&') {
          haveMnemonic = true;
          mnemonic = text.charAt(i);
          mnemonicIndex = result.length();
        }
      }
      result.append(text.charAt(i));
    }
    component.setText(result.toString());
    if (haveMnemonic) {
      component.setMnemonic(mnemonic);
      component.setDisplayedMnemonicIndex(mnemonicIndex);
    }
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return contentPane;
  }

  private void createGUI() {
    setTitle(
            Translation.get("UpdateDialogBundle", "infoAboutUpdate")
                    + " â€” "
                    + applicationVersion.version().getBeautifulVersionString());
    setIconImage(Toolkit.getDefaultToolkit()
            .getImage(UpdateInfoDialog.class.getResource("/images/infoIcon16.png")));

    setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    setContentPane(contentPane);
    setModal(true);
    getRootPane().setDefaultButton(buttonOK);

    getRootPane()
            .registerKeyboardAction(
                    e -> onOK(),
                    KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                    JComponent.WHEN_IN_FOCUSED_WINDOW);

    buttonOK.addActionListener(e -> onOK());

    final Dimension size = new Dimension(700, 400);
    setMinimumSize(size);
    setSize(size);
    pack();

    fillData();

    setLocation(FrameUtils.getFrameOnCenterLocationPoint(this));
  }

  private void fillData() {

    if (updateInfo == null) {
      legacyPanel.setVisible(true);
      updateInfoPanel.setVisible(false);
      fillLegacyTextPane();
    } else {
      legacyPanel.setVisible(false);
      updateInfoPanel.setVisible(true);

      final HtmlTag html = htmlService.prepareUpdateInfoHtmlPage(updateInfo);

      final String render = html.render();
      log.debug("Update page rendered: {}", render);
      updateInfoEditorPane.setText(render);
      updateInfoEditorPane.setCaretPosition(0);
    }
  }

  private void fillLegacyTextPane() {
    textPane.setText(
            generatePageForDisplay(applicationVersion.title(), applicationVersion.releaseInfo()));

    textPane.registerKeyboardAction(
            e -> onOK(), KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), JComponent.WHEN_FOCUSED);
    textPane.addHyperlinkListener(this::onHyperlinkClick);
    textPane.setCaretPosition(0);
  }

  private void onHyperlinkClick(HyperlinkEvent e) {
    if (e.getEventType() == EventType.ACTIVATED) {
      final URL url = e.getURL();
      if (url.toString().startsWith("mailto:")) {
        try {
          Desktop.getDesktop().mail(url.toURI());
        } catch (URISyntaxException | IOException ex) {
          log.warn("Can not open mail for: '" + url + "'", ex);
        }
      } else {
        new UrlsProceed().openUrl(url);
      }
    }
  }

  private String generatePageForDisplay(String updateTitle, String updateInfo) {
    String style =
            "<style>"
                    + "code {"
                    + "    padding: 0;"
                    + "    padding-top: 0.2em;"
                    + "    padding-bottom: 0.2em;"
                    + "    margin: 0;"
                    + "    font-size: 85%;"
                    + "    background-color: #f3f3f3;"
                    + "    border-radius: 3px;"
                    + "}"
                    + "</style>";
    String defaultHead = "<html><head>" + style + "</head><body>";

    String title =
            "<center style=\"font-size:14px; color:#4f7ece; padding-bottom:10px;\">"
                    + updateTitle
                    + "</center>";
    String defaultFooter = "</body></html>";
    updateInfo = updateInfo.replaceAll("\n", "<br>");
    final String customTextColor =
            Boolean.TRUE.equals(new DarkModeActiveSettings().getValue()) ? "color: white;" : "";
    updateInfo =
            "<p style=\"font-family:'Open Sans'; font-size:12px; padding:0; margin:0; "
                    + customTextColor
                    + " \">"
                    + updateInfo
                    + "</p>";

    return defaultHead + title + updateInfo + defaultFooter;
  }

  private void onOK() {
    dispose();
  }
}
